#!/bin/sh
. "$(dirname "$0")/_/husky.sh"
# reformat code
npx lint-staged

# set removeUnusedKeys to true and debug to true in i18next-scanner.config.js
# to remove unusedkeys and see what is going to be removed
# you can run this manually without commit by (note that whole hook is executed):
# git hook run pre-commit
npx i18next-scanner --config i18next-scanner.config.js

# i18next-scanner does not merge the key-value pairs between translation files
# key is found in one -> should be found in others
# even though the scanner can't find it in code

cat << 'EOF' | node --input-type=module - && git add src/locales/
import { open, readFile } from 'node:fs/promises';
import process from 'node:process';
const path = `src/locales`;
const languages = ['fi', 'sv', 'en'];

const files = {};

const openFiles = async (mode) => {
  for (const language of languages) {
    const file = files[language] || 
      { name: `${path}/default.${language}.json`, handle: null, content: '' };
    file.handle = await open(file.name, mode);
    files[language] = file;
  }
};

const readFiles = async () => {
  for (const language of languages) {
    console.log(`Reading language file: ${files[language].name}`);
    const content = await files[language].handle.readFile({ encoding: 'utf8' });
    files[language]['content'] = JSON.parse(content);
  }
};

const mergeFiles = (a, b) => {
  for (const key of Object.keys(a)) {
    const aValue = a[key];
    const bValue = b[key];
    if (bValue && typeof aValue !== typeof bValue) {
      throw new Error(
        `${key} is an ${typeof aValue} in one file and ${typeof bValue} in another, \
        fix it by setting both as strings or objects and try again!`
      );
    }
    
    if (typeof aValue === 'object') {
      if (!b[key]) {
        b[key] = {};
      }
      mergeFiles(aValue, b[key]);
    }

    if (!bValue && typeof aValue === 'string') {
      console.log(`\t${key} not found in the second object. Adding "${key}": "${key}"`);
      b[key] = key;
    }

    const hasUnsupportedType = typeof aValue !== 'string' && 
      typeof aValue !== 'object' || Array.isArray(aValue);
    if (hasUnsupportedType) {
      throw new Error(
        `${key} has an type of ${typeof key} in translation file that is not supported. \
        Only supported types are string "" and object {} that contains strings or these objects.`
      );
    }
  }
};

const mergeFileContents = () => {
  for (const language of languages) {
    const content = files[language]['content'];
    for (const otherLanguage of languages) {
      if (language === otherLanguage) {
        continue;
      }
      const otherContent = files[otherLanguage]['content'];
      console.log(`Merging ${language} with ${otherLanguage}`);
      mergeFiles(content, otherContent);
    }
  }
};

const closeFiles = async () => {
  for (const language of languages) {
    if (files[language].handle) {
      await files[language].handle.close();
    }
  }
};

const writeFiles = async () => {
  for (const language of languages) {
    const content = files[language].content;
    console.log(`Writing merged content to ${files[language].name}`);
    await files[language].handle.writeFile(
      JSON.stringify(content, null, '  '), 
      { encoding: 'utf8' }
    );
  }
};

try {
  console.log(`===\tMerging default translation keys between languages\t===`);
  await openFiles('r');
  await readFiles();

  mergeFileContents();

  await closeFiles();

  await openFiles('w');
  await writeFiles();

  console.log(`===\tFinished merging default translation keys\t===`);
  process.exitCode = 0;
} catch (error) {
  console.error('Unexpected error occurred: ', error);
  process.exitCode = 1;
} finally {
  closeFiles();
}
EOF
