image: quay.io/tike/alpine-oc-node

variables:
  npm_config_cache: '$CI_PROJECT_DIR/.npm'

# Define a hidden job to be used with extends
# Better than default to avoid activating cache for all jobs
.dependencies_cache:
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm
    policy: pull

# Define the stages
stages:
  - setup
  - dependency-check
  - sonarqube-check
  - dtrack-sbom
  - submit-sbom
  - build
  - test
  - deploy

# Define the process for setup stage
setup:
  stage: setup
  script:
    - curl -X GET https://gw-api-test.it.helsinki.fi/organisation/info/v1/texts -H accept:application/json -H X-Api-Key:$TEST_API_GW_KEY -o texts.json
    - >
      CYPRESS_CACHE_FOLDER='.cache/Cypress'
      PLAYWRIGHT_BROWSERS_PATH=.cache/ms-playwright
      npm ci
  tags:
    - ohtu-build-3
  extends: .dependencies_cache
  cache:
    policy: pull-push
  artifacts:
    expire_in: 1h
    paths:
      - node_modules
      - texts.json

# Define the process for test stage
test:
  stage: test
  tags:
    - ohtu-build-3
  script:
    - npm test
  coverage: /All files\s*\|\s*([\d\.]+)/

sonarqube-check:
  stage: sonarqube-check
  tags:
    - ohtu-build-3
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: ['']
  variables:
    SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar' # Defines the location of the analysis task cache
    GIT_DEPTH: '0' # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: '${CI_JOB_NAME}'
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - master
  needs:
    - job: dependency-check
      artifacts: true

dtrack-sbom:
  tags:
    - ohtu-build-4
  stage: dtrack-sbom
  script:
    - mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom
  artifacts:
    expire_in: 1h
    paths:
      - target/bom.xml

submit-sbom:
  image: alpine:latest
  stage: dependency-track-submit
  only:
    - main
  tags:
    - ohtu-build-4
  dependencies:
    - dtrack-sbom
  before_script:
    - apk add --no-cache curl
  script:
    - "curl -X POST ${DTRACK_API_URL} -H 'Content-Type: multipart/form-data' -H 'X-Api-Key: '${DTRACK_API_KEY} -F 'projectName='${PROJECT_NAME} -F 'autoCreate=true' -F 'projectVersion='${PROJECT_VERSION} -F 'bom=@target/bom.xml'"

dependency-check:
  stage: dependency-check
  only:
    - master
  tags:
    - ohtu-build-3
  image:
    name: owasp/dependency-check-action:latest
    entrypoint: ['']
  script:
    - >
      /usr/share/dependency-check/bin/dependency-check.sh
      --project orgrek-frontend --scan .
      --format JSON --format HTML -nvdApiKey $NVD_API_KEY
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - dependency-check-report.json
      - dependency-check-report.html

build_dev:
  stage: build
  tags:
    - ohtu-build-3
  only:
    - master
  script:
    - yes | cp -f -v .env.development .env.production || true
    - CI=false npm run build
  artifacts:
    name: orgrek-build
    paths:
      - build

build_organisation_dev:
  stage: build
  tags:
    - ohtu-build-3
  only:
    - organisation-dev
  script:
    - yes | cp -f -v .env.organisation-development .env.production || true
    - CI=false npm run build
  artifacts:
    name: orgrek-build
    paths:
      - build

build_test:
  stage: build
  tags:
    - ohtu-build-3
  only:
    - test
  script:
    - yes | cp -f -v .env.test .env.production || true
    - CI=false npm run build
  artifacts:
    name: orgrek-build
    paths:
      - build

build_prod:
  stage: build
  tags:
    - ohtu-build-3
  only:
    - prod
  script:
    - CI=false npm run build
  artifacts:
    name: orgrek-build
    paths:
      - build

# Define the process for deploy stage to development environment
deploy_dev:
  stage: deploy
  tags:
    - ohtu-build-3
  environment:
    name: development
  only:
    - master
  except:
    # Skip deploy when scheduled npm audit and outdated scans are executed.
    - schedules
  script:
    # set home path for openshift 1001 user
    - export HOME=/home/1001
    - mv nginx_dev.conf nginx.conf
    # before any action, I connect to the OpenShift server with the appropriate credentials
    - oc login https://$OPENSHIFT_ADDR_TEST:$OPENSHIFT_PORT --token=$OPENSHIFT_TOKEN_TEST
    - oc project organisaatiorekisteri
    - oc set env deploy/organisaatiorekisteri-frontend-dev REACT_APP_GIT_HASH=$(git rev-parse --short=7 HEAD)
    - oc set env deploy/organisaatiorekisteri-frontend-dev TZ="Europe/Helsinki"
    - oc start-build organisaatiorekisteri-frontend-dev --from-dir=. --follow
    - oc patch bc/organisaatiorekisteri-frontend-dev --patch '{"spec":{"successfulBuildsHistoryLimit":1}}'
    - oc patch bc/organisaatiorekisteri-frontend-dev --patch '{"spec":{"failedBuildsHistoryLimit":1}}'
    # set pod memory quota to 100 MB and limit to 500 MB
    - oc set resources deploy/organisaatiorekisteri-frontend-dev --limits=memory=500Mi --requests=memory=100Mi

deploy_test:
  stage: deploy
  tags:
    - ohtu-build-3
  environment:
    name: test
  only:
    - test
  except:
    # Skip deploy when scheduled npm audit and outdated scans are executed.
    - schedules
  script:
    # set home path for openshift 1001 user
    - export HOME=/home/1001
    - mv nginx_test.conf nginx.conf
    # before any action, I connect to the OpenShift server with the appropriate credentials
    - oc login https://$OPENSHIFT_ADDR_TEST:$OPENSHIFT_PORT --token=$OPENSHIFT_TOKEN_TEST
    - oc project organisaatiorekisteri
    - oc set env deploy/organisaatiorekisteri-frontend-test REACT_APP_GIT_HASH=$(git rev-parse --short=7 HEAD)
    - oc set env deploy/organisaatiorekisteri-frontend-test TZ="Europe/Helsinki"
    - oc start-build organisaatiorekisteri-frontend-test --from-dir=. --follow
    - oc patch bc/organisaatiorekisteri-frontend-test --patch '{"spec":{"successfulBuildsHistoryLimit":1}}'
    - oc patch bc/organisaatiorekisteri-frontend-test --patch '{"spec":{"failedBuildsHistoryLimit":1}}'
    # set pod memory quota to 100 MB and limit to 500 MB
    - oc set resources deploy/organisaatiorekisteri-frontend-test --limits=memory=500Mi --requests=memory=100Mi

deploy_prod:
  stage: deploy
  tags:
    - ohtu-build-3
  environment:
    name: prod
  only:
    - prod
  except:
    # Skip deploy when scheduled npm audit and outdated scans are executed.
    - schedules
  script:
    # set home path for openshift 1001 user
    - export HOME=/home/1001
    - mv nginx_prod.conf nginx.conf
    # before any action, I connect to the OpenShift server with the appropriate credentials
    - oc login https://$OPENSHIFT_ADDR_PROD:$OPENSHIFT_PORT --token=$OPENSHIFT_TOKEN_PROD
    - oc project organisaatiorekisteri
    - oc set env deploy/organisaatiorekisteri-frontend-prod REACT_APP_GIT_HASH=$(git rev-parse --short=7 HEAD)
    - oc set env deploy/organisaatiorekisteri-frontend-prod TZ="Europe/Helsinki"
    - oc start-build organisaatiorekisteri-frontend-prod --from-dir=. --follow
    - oc patch bc/organisaatiorekisteri-frontend-prod --patch '{"spec":{"successfulBuildsHistoryLimit":1}}'
    - oc patch bc/organisaatiorekisteri-frontend-prod --patch '{"spec":{"failedBuildsHistoryLimit":1}}'
    # set pod memory quota to 100 MB and limit to 500 MB
    - oc set resources deploy/organisaatiorekisteri-frontend-prod --limits=memory=500Mi --requests=memory=100Mi
